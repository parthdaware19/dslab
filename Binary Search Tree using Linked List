#include <stdio.h>
  // Find the leftmost leaf
  while (current && current->left != NULL)
    current = current->left;
  return current;
}

// Insert a node in BST
struct node *insert(struct node *node, int key) {
struct node *newNode = (struct node *)malloc(sizeof(struct node));
	newNode->key = key;
	newNode->left = newNode->right = NULL;

	if (node == NULL)
		return newNode;

	struct node *parent = NULL, *current = node;
	while (current != NULL) {
		parent = current;
		if (key <= current->key)
			current = current->left;
		else
			current = current->right;
	}

	if (key <= parent->key)
		parent->left = newNode;
	else
		parent->right = newNode;
}	return node;
			free(root);
			return temp;
		}

		struct node *temp = minValueNode(root->right);
		root->key = temp->key;
		root->right = deleteNode(root->right, temp->key);
	}
	return root;
}

// Driver code
int main() {
  struct node *root = NULL;
  int n,data;
  printf("Enter how many nodes you want to insert in BST :");
  scanf("%d",&n);
  for( int i =0 ; i < n ; i++){
      printf("Enter the value: ");
      scanf("%d", &data);
      root = insert(root, data);
  }

  printf("Inorder traversal(Always gives ascending order): ");
  inorder(root);
  printf("\nPreorder traversal: ");
  preorder(root);
  printf("\nEnter the data to delete: ");
  scanf("%d",&data);

  printf("After deleting %d\n",data);
  root = deleteNode(root, data);
  printf("Inorder traversal: ");
  inorder(root);
  printf("\nPreorder traversal: ");
  preorder(root);
}
